name: Test and deploy to server

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        entrypoint: >
          /bin/sh -c "
          /docker-entrypoint.sh postgres &
          sleep 10 &&
          echo 'Creating additional database: testing_fast_api' &&
          echo 'CREATE DATABASE testing_fast_api;' | psql --username=$POSTGRES_USER --dbname=$POSTGRES_DB &&
          wait %%;"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python üêç
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.2

    - name: Upgrade pip üê§
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Generate .env file
      env:
        APP_KEY: ${{ secrets.APP_KEY }}
        ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        SERVER_URL: ${{ secrets.SERVER_URL }}
      run: chmod +x ./create_env.sh && ./create_env.sh

    - name: Run tests
      run: pytest

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Stop docker containers
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
        ssh -o StrictHostKeyChecking=no root@$SERVER_IP << EOF
        cd /var/www
        docker-compose down
        EOF

    - name: SSH to server and clone the repository
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
          ssh -o StrictHostKeyChecking=no root@$SERVER_IP << EOF
          rm -rf /var/www && mkdir /var/www
          git clone https://github.com/hrsa/py-fastapi.git /var/www
          EOF

    - name: Modify nginx config
      env:
        SERVER_IP:  ${{ secrets.SERVER_IP }}
        SERVER_URL: ${{ secrets.SERVER_URL }}
      run: |
          ssh -o StrictHostKeyChecking=no root@$SERVER_IP << EOF
          sed -i 's/yourdomain.com/$SERVER_URL/g' /var/www/nginx-config.conf
          EOF

    - name: Copy .env file to server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: |
        scp -o StrictHostKeyChecking=no .env root@$SERVER_IP:/var/www

    - name: Start docker compose
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
      run: ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /var/www && docker-compose up --build -d"